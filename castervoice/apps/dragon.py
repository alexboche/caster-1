
# from dragonfly import (Grammar, Playback, Key, Dictation, Function, Choice, Mimic, WaitWindow, Pause, Repeat)
from dragonfly import *
from castervoice.lib import control
from castervoice.lib import utilities, settings
from castervoice.lib.dfplus.additions import IntegerRefST
from castervoice.lib.dfplus.merge import gfilter
from castervoice.lib.dfplus.merge.mergerule import MergeRule
from castervoice.lib.dfplus.state.short import R

_NEXUS = control.nexus()


def fix_dragon_double(nexus):
    try:
        lr = nexus.history[len(nexus.history) - 1]
        lu = " ".join(lr)
        Key("left/5:" + str(len(lu)) + ", del").execute()
    except Exception:
        utilities.simple_log(False)

def cap_dictation(dictation):
    input_list = str(dictation).split(" ")
    output_list = []
    for i in range(len(input_list)):
        if input_list[i] == "cap":
            input_list[i+1] = input_list[i+1].title()
        else:
            output_list.append(input_list[i])
    Text(" ".join(output_list)).execute()

# extras are common to both classes in this file
extras_for_whole_file = [
        Dictation("text"),
        Dictation("dict"),
        Dictation("dictation"),
        Dictation("mim"),
        IntegerRefST("n", 1, 1000),
        IntegerRefST("number", 1, 10),
        Choice("first_second_third", {
            "first": 0,
            "second": 1,
            "third": 2,
            "fourth": 3,
            "fifth": 4,
            "six": 5,
            "seventh": 6
        }),
        
    ]
defaults_for_whole_file = {"n": 1, "mim": "", "text": "", "dict": "", "dictation": ""}

class DragonRule(MergeRule):
    pronunciation = "dragon"

    mapping = {
        "format <dictation>": Function(cap_dictation, extra={"dictation"}),
        '(lock Dragon | deactivate)':
            R(Playback([(["go", "to", "sleep"], 0.0)]), rdescript="Dragon: Go To Sleep"),
        '(number|numbers) mode':
            R(Playback([(["numbers", "mode", "on"], 0.0)]),
              rdescript="Dragon: Number Mode"),
        'spell mode':
            R(Playback([(["spell", "mode", "on"], 0.0)]), rdescript="Dragon: Spell Mode"),
        'dictation mode':
            R(Playback([(["dictation", "mode", "on"], 0.0)]),
              rdescript="Dragon: Dictation Mode"),
        'normal mode':
            R(Playback([(["normal", "mode", "on"], 0.0)]),
              rdescript="Dragon: Normal Mode"),
        'com on':
            R(Playback([(["command", "mode", "on"], 0.0)]),
              rdescript="Dragon: Command Mode (On)"),
        'com off':
            R(Playback([(["command", "mode", "off"], 0.0)]),
              rdescript="Dragon: Command Mode (Off)"),
        'scratch':
            R(Playback([(["scratch", "that"], 0.0)]), rdescript="Dragon: 'Scratch That'"),
        "reboot dragon":
            R(Function(utilities.reboot), rdescript="Reboot Dragon Naturallyspeaking"),
        "fix dragon double":
            R(Function(fix_dragon_double, nexus=_NEXUS),
              rdescript="Fix Dragon Double Letter"),
        "left point":
            R(Playback([(["MouseGrid"], 0.1), (["four", "four"], 0.1), (["click"], 0.0)]),
              rdescript="Mouse: Left Point"),
        "right point":
            R(Playback([(["MouseGrid"], 0.1), (["six", "six"], 0.1), (["click"], 0.0)]),
              rdescript="Mouse: Right Point"),
        "center point":
            R(Playback([(["MouseGrid"], 0.1), (["click"], 0.0)]),
              rdescript="Mouse: Center Point"),

        # new commands from Alex      
        "[show] windows": Mimic("list", "all", "windows"), # this emulates a useful native dragon command
        "cory <dict>": 
            R(Mimic("correct", extra="dict") + WaitWindow(title="spelling window") + Mimic("choose", "one"),
                rdescript="brings up the correction menu for the phrase spoken in the command and chooses the 1st choice"),
        "cory that": 
            R(Mimic("correct", "that") + WaitWindow(title="spelling window") + Mimic("choose", "one"), 
                rdescript="brings up the correction menu for the previously spoken phrase"),

        "make that <dict>": R(Mimic("scratch", "that") + Mimic(extra="dict"), 
             rdescript="deletes the dictation generated by the previous utterance and replaces it with what you say next"),
        'strike [<n>]': R(Playback([(["scratch", "that"], 0.03)]), 
            rdescript="delete dictation from previous n utterances") * Repeat(extra="n"),
             
        "train word": R(Mimic("train", "that") + Key("a-r/200, s"),
             rdescript="quickly train word when you have it selected in a Dragon friendly text field"),
        "(add train | train from add word)": R(Key("a-a/2, enter/300, a-s"),
            rdescript="quickly train word from the add word dialogbox"),
        "(train from vocab | cab train)": R(Key("a-t/50, enter/50, a-r/250, s"), 
            rdescript="quickly train word from Vocabulary Editor"),
        
        "recognition history": 
            R(Playback([(["view", "recognition", "history"], 0.03)]),
             rdescript="open Dragon recognition history"),
        "peak [recognition] history": 
            R(Playback([(["view", "recognition", "history"], 0.03)])
                + Pause("300") + Key("escape"), 
                    rdescript="open Dragon recognition history then close it"),
        "[dictation] sources": R(Mimic("manage", "dictation", "sources"), 
            rdescript="manage dictation sources"),
        
        # these commands are for when you want to talk to somebody else in the room but you have your microphone on.
        "<dict> (Peru)": R(Text(''), rdescript="ignores everything you before and after peru)"),
        "<dict> (Brazil)": R(Mimic("go", "to", "sleep"),
            rdescript="ignores everything you say before and after Brazil and turns off the microphone"),
        "Bolivia <dict>": R(Text(''),
            rdescript="ignores everything you say if you start the utterance with Bolivia"),
        "Ecuador <dict>": R(Text(''), 
            rdescript="ignores everything you say and turns off the mic if you start the utterance with Ecuador"),

        
    }
    # see above
    extras = extras_for_whole_file
    defaults = defaults_for_whole_file
class SpellingWindowRule(MergeRule):
    mapping = {
         # the following commands maybe should be context specific to the Dragon spelling window
         "<first_second_third> word": 
             Key("home, c-right:%(first_second_third)d, cs-right"), 
         "last [word]": Key("right, cs-left"),
         "second last word": Key("right, c-left:1, cs-left"),
         "<number>": Mimic("choose", extra="number"), # instead of having to say e.g. choose one you can just say one
    }

    # see above
    extras = extras_for_whole_file
    defaults = defaults_for_whole_file

    

# #---------------------------------------------------------------------------

grammar = Grammar("Dragon Naturallyspeaking")

if settings.SETTINGS["apps"]["dragon"] and not settings.WSR:
    rule_1 = DragonRule(name="dragon")
    rule_2 = SpellingWindowRule(name="spelling_window")
    gfilter.run_on(rule_1)
    gfilter.run_on(rule_2)
    grammar.add_rule(rule_1)
    grammar.add_rule(rule_2)
    grammar.load()
